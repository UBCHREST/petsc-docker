name: Petsc-Docker-Pull-Request

on:
  # Run tests for any PRs.
  pull_request:

# only allow one test per PR to be run
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: petsc-build

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: |
          # Get the latest version of petsc 
          export PETSC_COMMIT=$(git ls-remote https://gitlab.com/petsc/petsc.git HEAD | awk '{ print substr($1, 1, 8)}'D)
          echo "petsc_commit=${PETSC_COMMIT}" >>$GITHUB_OUTPUT

    outputs:
      petsc_commit: ${{ steps.version.outputs.petsc_commit }}

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test-matrix:
    needs: [ get-version ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ 
            { cc: gcc, cxx: g++, debugFlags: "-g -O0 -fsanitize=address",  optFlags: "-g -O -fsanitize=address", id: -gcc-asan },
            { cc: gcc, cxx: g++, debugFlags: "-g -O0",  optFlags: "-g -O", id: -gcc },
            { cc: clang, cxx: clang++, debugFlags: "-g -O0",  optFlags: "-g -O3",  id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Run Test image
        # don't run the tests if this was manually pushed
        if: contains(fromJSON('["schedule", "pull_request"]'), github.event_name)        
        run: |
          # define the image id
          IMAGE_ID=$IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.petsc_commit}}
          
          # clean before building 
          docker system prune -a -f --volumes
          
          # build the petsc-image
          docker buildx build .\
            --provenance false \
            --build-arg PETSC_BUILD_COMMIT=${{ needs.get-version.outputs.petsc_commit}} \
            --build-arg CC=${{matrix.compiler.cc}} \
            --build-arg CXX=${{matrix.compiler.cxx}} \
            --build-arg DEBUGFLAGS="${{matrix.compiler.debugFlags}}" \
            --build-arg OPTFLAGS="${{matrix.compiler.optFlags}}" \
            --build-arg Index64Bit=${{matrix.indices.index64bit}} \
            --tag $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --load \
            --file Dockerfile 

          # List local images
          docker image ls

          # Build the image
          docker build .\
            --build-arg PETSC_BASE_IMAGE=$IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --file DockerAblateFile    

  test:
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
      - run: echo All tests Successful!

          
          
                    