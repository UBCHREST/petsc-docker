name: Debug

on:
  # Run tests for any PRs.
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - mcgurn/manifest-update


env:
  IMAGE_NAME: petsc-build

jobs:
 
  # Push the latest tag if everything build
  # Note: this does not run on multiple archs because it combines the multiple arches into a single manifest
  push-latest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.10'

      - name: Build Manifest Tool
        run: |
            git clone https://github.com/estesp/manifest-tool
            cd manifest-tool && make binary
            cd ..

      - name: Build and push manifest
        run: |
          export PETSC_VERSION=18290094
          
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Write the config to the file
          echo "image: $IMAGE_ID:$PETSC_VERSION" > config.version.yaml
          echo "manifests:" >> config.version.yaml
          echo "  - image: $IMAGE_ID-arm64:$PETSC_VERSION " >> config.version.yaml
          echo "    platform: " >> config.version.yaml
          echo "      architecture: arm64 " >> config.version.yaml
          echo "      os: linux " >> config.version.yaml
          echo "  - image: $IMAGE_ID-amd64:$PETSC_VERSION " >> config.version.yaml
          echo "    platform: " >> config.version.yaml
          echo "      architecture: amd64 " >> config.version.yaml
          echo "      os: linux " >> config.version.yaml
        
          # Generate the manifest and push
          manifest-tool/manifest-tool push from-spec config.version.yaml
        
          # Repeat for the latest tag
          echo "image: $IMAGE_ID:latest" > config.latest.yaml
          echo "manifests:" >> config.latest.yaml
          echo "  - image: $IMAGE_ID-arm64:$PETSC_VERSION " >> config.latest.yaml
          echo "    platform: " >> config.latest.yaml
          echo "      architecture: arm64 " >> config.latest.yaml
          echo "      os: linux " >> config.latest.yaml
          echo "  - image: $IMAGE_ID-amd64:$PETSC_VERSION " >> config.latest.yaml
          echo "    platform: " >> config.latest.yaml
          echo "      architecture: amd64 " >> config.latest.yaml
          echo "      os: linux " >> config.latest.yaml
        
          # Generate the manifest and push
          manifest-tool/manifest-tool push from-spec config.latest.yaml
        
#           docker manifest create \
#             $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
#             --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.petsc_commit}} \
#             --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.petsc_commit}} 
# 
#           # push
#           docker manifest push $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}}
# 
#           # tag as latest
#           docker manifest create \
#             $IMAGE_ID:latest \
#             --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.petsc_commit}} \
#             --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.petsc_commit}} 
#           
#           # push
#           docker manifest push $IMAGE_ID:latest

#   trigger-event:
#     needs: push-latest
#     runs-on: ubuntu-latest
#     steps:
#       - name: Repository Dispatch to rebuild ABLATE dependencies
#         uses: peter-evans/repository-dispatch@v2
#         with:
#           repository: UBCHREST/ablate
#           token: ${{ secrets.TRIGGER_PAT }}
#           event-type: rebuild-dependencies
          
          
                    