name: Docker-Publish

on:
  schedule:
    # Recompile at 00:15 UTC on Sundays
    - cron: '15 0 * * 0'

  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  workflow_dispatch:
  # Allow this event to be triggered in the github ui

# only allow one test per PR to be run
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: petsc-build

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: |
          # Get the latest version of petsc 
          export PETSC_COMMIT=$(git ls-remote https://gitlab.com/petsc/petsc.git HEAD | awk '{ print substr($1, 1, 8)}'D)
          echo "petsc_commit=${PETSC_COMMIT}" >>$GITHUB_OUTPUT

    outputs:
      petsc_commit: ${{ steps.version.outputs.petsc_commit }}

  # Always build and push the latest package to github packages.  It does not matter if it works with ablate or not
  build:
    needs: [get-version]
    strategy:
      fail-fast: false
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ 
            { cc: gcc, cxx: g++, debugFlags: "-g -O0",  optFlags: "-g -O", id: -gcc },
            { cc: clang, cxx: clang++, debugFlags: "-g -O0",  optFlags: "-g -O3",  id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
        include:
          # only run the fsanitize on amd to save ub resources 
          - arch: { runson: ubuntu-latest, id: -amd64 }
            compiler: { cc: gcc, cxx: g++, debugFlags: "-g -O0 -fsanitize=address",  optFlags: "-g -O -fsanitize=address", id: -gcc-asan }
            indices: [ { index64bit: 0, id: "" } ]
          - arch: { runson: ubuntu-latest, id: -amd64 }
            compiler: { cc: gcc, cxx: g++, debugFlags: "-g -O0 -fsanitize=address",  optFlags: "-g -O -fsanitize=address", id: -gcc-asan }
            indices: [ { index64bit: 1, id: "-index64" } ]
        
    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: checkout code
        uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Check if petsc version docker exisit
        run: |
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # check if image exists 
          if docker manifest inspect $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} > /dev/null; then
            echo "Docker Image ${IMAGE_ID} exists"
            echo "petsc_docker_require_build=false" >> "$GITHUB_ENV"
          else
            echo "Docker Image ${IMAGE_ID} has not been built before"
            echo "petsc_docker_require_build=true" >> "$GITHUB_ENV"
          fi

      - name: Build image if needed
        if: env.petsc_docker_require_build == 'true'
        run: |
          # define the image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.petsc_commit}}
          
          # Build the image
          docker buildx build .\
            --provenance false \
            --build-arg PETSC_BUILD_COMMIT=${{ needs.get-version.outputs.petsc_commit}} \
            --build-arg CC=${{ matrix.compiler.cc}} \
            --build-arg CXX=${{ matrix.compiler.cxx}} \
            --build-arg DEBUGFLAGS="${{matrix.compiler.debugFlags}}" \
            --build-arg OPTFLAGS="${{matrix.compiler.optFlags}}" \
            --build-arg Index64Bit=${{ matrix.indices.index64bit}} \
            --push \
            --tag $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --file Dockerfile 
  

  # Run tests on the latest pushed image
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test-matrix:
    needs: [ get-version, build ]
    strategy:
      fail-fast: false
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ 
            { cc: gcc, cxx: g++, debugFlags: "-g -O0",  optFlags: "-g -O", id: -gcc },
            { cc: clang, cxx: clang++, debugFlags: "-g -O0",  optFlags: "-g -O3",  id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
        include:
          # only run the fsanitize on amd to save ub resources 
          - arch: { runson: ubuntu-latest, id: -amd64 }
            compiler: { cc: gcc, cxx: g++, debugFlags: "-g -O0 -fsanitize=address",  optFlags: "-g -O -fsanitize=address", id: -gcc-asan }
            indices: [ { index64bit: 0, id: "" } ]
          - arch: { runson: ubuntu-latest, id: -amd64 }
            compiler: { cc: gcc, cxx: g++, debugFlags: "-g -O0 -fsanitize=address",  optFlags: "-g -O -fsanitize=address", id: -gcc-asan }
            indices: [ { index64bit: 1, id: "-index64" } ]
        
        
    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Run Test image
        # don't run the tests if this was manually pushed
        if: contains(fromJSON('["schedule", "pull_request"]'), github.event_name)        
        run: |
          # define the image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.petsc_commit}}
          
          # Build the image
          docker build .\
            --build-arg PETSC_BASE_IMAGE=$IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --file DockerAblateFile    

  test:
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
      - run: echo All tests Successful!

  # Push the latest tag if everything build and tested.  Note this must run on max-parallel=1
  push-latest:
    needs: [ get-version, test ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ {id: -gcc }, { id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
        include:
          # only run the fsanitize on amd to save ub resources 
          - arch: { runson: ubuntu-latest, id: -amd64 } 
            compiler: {id: -gcc-asan}
            indices: [ { index64bit: 0, id: "" } ]
          - arch: { runson: ubuntu-latest, id: -amd64 } 
            compiler: {id: -gcc-asan}
            indices: [  { index64bit: 1, id: "-index64" } ]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Build Manifest
        run: |
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # check if image exisits 
          if docker manifest inspect $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} > /dev/null; then
            echo "Appending manifest"
            docker buildx imagetools create -t $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} --append $IMAGE_ID${{matrix.arch.id}}:${{ needs.get-version.outputs.petsc_commit}}
            docker buildx imagetools create -t $IMAGE_ID:latest --append $IMAGE_ID${{matrix.arch.id}}:${{ needs.get-version.outputs.petsc_commit}}
          else
            echo "Creating new manifest"
            docker buildx imagetools create -t $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} $IMAGE_ID${{matrix.arch.id}}:${{ needs.get-version.outputs.petsc_commit}}
            docker buildx imagetools create -t $IMAGE_ID:latest $IMAGE_ID${{matrix.arch.id}}:${{ needs.get-version.outputs.petsc_commit}}
          fi

  trigger-event:
    needs: push-latest
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch to rebuild ABLATE dependencies
        uses: peter-evans/repository-dispatch@v2
        with:
          repository: UBCHREST/ablate
          token: ${{ secrets.TRIGGER_PAT }}
          event-type: rebuild-dependencies
          
          
                    