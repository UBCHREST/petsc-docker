name: Docker-Publish

on:
  schedule:
    # Recompile at 00:15 UTC on Sundays
    - cron: '15 0 * * 0'

  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  workflow_dispatch:
  # Allow this event to be triggered in the github ui

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: petsc-build

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - id: version
        run: |
          # Get the latest version of petsc 
          export PETSC_COMMIT=$(git ls-remote https://gitlab.com/petsc/petsc.git HEAD | awk '{ print substr($1, 1, 8)}'D)
          echo "::set-output name=petsc_commit::${PETSC_COMMIT}"

    outputs:
      petsc_commit: ${{ steps.version.outputs.petsc_commit }}

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    needs: [ get-version ]
    strategy:
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}${{ matrix.compiler.id }}${{ matrix.indices.id }}-buildx-${{ github.sha }}${{ matrix.arch.id }}
          restore-keys: |
            ${{ runner.os }}${{ matrix.compiler.id }}${{ matrix.indices.id }}${{ matrix.arch.id }}-buildx-

      - name: Run Test image
        # don't run the tests if this was manually pushed
        if: github.event_name != 'workflow_dispatch'
        run: |
          # define the image id
          IMAGE_ID=$IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}${{matrix.arch.id}}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.petsc_commit}}
          
          # build the petsc-image
          docker buildx build .\
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg PETSC_BUILD_COMMIT=${{ needs.get-version.outputs.petsc_commit}} \
            --build-arg CC=${{matrix.compiler.cc}} \
            --build-arg CXX=${{matrix.compiler.cxx}} \
            --build-arg Index64Bit=${{matrix.indices.index64bit}} \
            --tag $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --load \
            --file Dockerfile 

          # List local images
          docker image ls

          # Build the image
          docker build .\
            --build-arg PETSC_BASE_IMAGE=$IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --file DockerAblateFile    

  # Push image to GitHub Packages.
  build:
    needs: [get-version, test]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        arch: [ { runson: ARM64, id: -ARM64 }, { runson: ubuntu-latest, id: -AMD64 } ]
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: checkout code
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}${{ matrix.compiler.id }}${{ matrix.indices.id }}-buildx-${{ github.sha }}${{ matrix.arch.id }}
          restore-keys: |
            ${{ runner.os }}${{ matrix.compiler.id }}${{ matrix.indices.id }}${{ matrix.arch.id }}-buildx-

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Build image
        run: |
          # define the image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}${{matrix.arch.id}}

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.petsc_commit}}
          
          # Build the image
          docker buildx build .\
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg PETSC_BUILD_COMMIT=${{ needs.get-version.outputs.petsc_commit}} \
            --build-arg CC=${{ matrix.compiler.cc}} \
            --build-arg CXX=${{ matrix.compiler.cxx}} \
            --build-arg Index64Bit=${{ matrix.indices.index64bit}} \
            --push \
            --tag $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --file Dockerfile \
  

  # Push the latest tag if everything build
  # Note: this does not run on multiple archs because it combines the multiple arches into a single manifest
  push-latest:
    needs: [ get-version, build ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Run Test image
        run: |
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # build a manifest file for this version
          docker manifest create \
            $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.petsc_commit}} \
            --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.petsc_commit}} 

          # push
          docker manifest push $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}}

          # tag as latest
          docker manifest create \
            $IMAGE_ID:latest \
            --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.petsc_commit}} \
            --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.petsc_commit}} 
          
          # push
          docker manifest push $IMAGE_ID:latest

  trigger-event:
    needs: push-latest
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch to rebuild ABLATE dependencies
        uses: peter-evans/repository-dispatch@v1
        with:
          repository: UBCHREST/ablate
          token: ${{ secrets.TRIGGER_PAT }}
          event-type: rebuild-dependencies
          
          
                    